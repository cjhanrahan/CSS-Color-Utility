{
  "name": "preprocess",
  "description": "Preprocess directives in HTML, JavaScript, etc directives based off variable context",
  "version": "2.1.1",
  "homepage": "https://github.com/jsoverson/preprocess",
  "author": {
    "name": "Jarrod Overson",
    "email": "jsoverson@gmail.com",
    "url": "http://jarrodoverson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsoverson/preprocess.git"
  },
  "bugs": {
    "url": "https://github.com/jsoverson/preprocess/issues"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://github.com/jsoverson/preprocess/blob/master/LICENSE"
    }
  ],
  "main": "lib/preprocess.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.3",
    "grunt": "~0.4.1",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "keywords": [
    "directive",
    "ENV",
    "environment",
    "ifdef",
    "ifndef",
    "echo",
    "include",
    "exclude",
    "process",
    "preprocess",
    "pragma"
  ],
  "readme": "# preprocess  [![Build Status](https://travis-ci.org/jsoverson/preprocess.png?branch=master)](https://travis-ci.org/jsoverson/preprocess)\n\nPreprocess HTML, JavaScript, and other files with directives based off custom or ENV configuration\n\n## What does it look like?\n\n```html\n<head>\n  <title>Your App\n\n  <!-- @if NODE_ENV='production' -->\n  <script src=\"some/production/lib/like/analytics.js\"></script>\n  <!-- @endif -->\n\n</head>\n<body>\n  <!-- @ifdef DEBUG -->\n  <h1>Debugging mode - <!-- @echo RELEASE_TAG --> </h1>\n  <!-- @endif -->\n  <p>\n  <!-- @include welcome_message.txt -->\n  </p>\n</body>\n```\n\n```js\nvar configValue = '/* @echo FOO */' || 'default value';\n\n// @ifdef DEBUG\nsomeDebuggingCall()\n// @endif\n\n```\n\n## Directive syntax\n\n### Basic syntax\n\nThe most basic usage is for files that only have two states, non-processed and processed.\nIn this case, your `@exclude` directives are removed after preprocessing\n\n```html\n<body>\n    <!-- @exclude -->\n    <header>You're on dev!</header>\n    <!-- @endexclude -->\n</body>\n```\n\nAfter build\n\n```html\n<body>\n</body>\n```\n\n### Advanced directives\n\n - `@if VAR='value'` / `@endif`\n   This will include the enclosed block if your test passes\n - `@ifdef VAR` / `@endif`\n   This will include the enclosed block if VAR is defined (typeof !== 'undefined')\n - `@ifndef VAR` / `@endif`\n   This will include the enclosed block if VAR is not defined (typeof === 'undefined')\n - `@include`\n   This will include the source from an external file. If the included source ends with a newline then the\n   following line will be space indented to the level the @include was found.\n - `@exclude` / `@endexclude`\n   This will remove the enclosed block upon processing\n - `@echo VAR`\n   This will include the environment variable VAR into your source\n - `@exec FUNCTION([param1, param2...])`\n   This will execute the environment FUNCTION with is parameters and echo the result into your source. The parameter\n   could be a string or a reference to another environment variable.\n\n### Extended html Syntax\n\nThis is useful for more fine grained control of your files over multiple\nenvironment configurations. You have access to simple tests of any variable within the context (or ENV, if not supplied)\n\n```html\n<body>\n    <!-- @if NODE_ENV!='production' -->\n    <header>You're on dev!</header>\n    <!-- @endif -->\n\n    <!-- @if NODE_ENV='production' -->\n    <script src=\"some/production/javascript.js\"></script>\n    <!-- @endif -->\n\n    <script>\n    var fingerprint = '<!-- @echo COMMIT_HASH -->' || 'DEFAULT';\n    </script>\n\n    <script src=\"<!-- @exec static_path('another/production/javascript.js') -->\"></script>\n</body>\n```\n\nWith a `NODE_ENV` set to `production` and `0xDEADBEEF` in\n`COMMIT_HASH` this will be built to look like\n\n```html\n<body>\n    <script src=\"some/production/javascript.js\"></script>\n\n    <script>\n    var fingerprint = '0xDEADBEEF' || 'DEFAULT';\n    </script>\n\n    <script src=\"http://cdn2.my.domain.com/another/javascript.js') -->\"></script>\n</body>\n```\n\nWith NODE_ENV not set or set to dev and nothing in COMMIT_HASH,\nthe built file will be\n\n```html\n<body>\n    <header>You're on dev!</header>\n\n    <script>\n    var fingerprint = '' || 'DEFAULT';\n    </script>\n\n    <script src=\"http://localhost/myapp/statics/another/javascript.js') -->\"></script>\n</body>\n```\n\nYou can also have conditional blocks that are hidden by default by using the\nfictional `!>` end tag instead of `-->` after your condition:\n\n```html\n<!-- @if true !>\n<p>Process was run!</p>\n<!-- @endif -->\n```\n\n### JavaScript, CSS, C, Java Syntax\n\nExtended syntax below, but will work without specifying a test\n\n```js\nnormalFunction();\n//@exclude\nsuperExpensiveDebugFunction()\n//@endexclude\n\n'/* @echo USERNAME */'\n\nanotherFunction();\n```\n\nBuilt with a NODE_ENV of production :\n\n```js\nnormalFunction();\n\n'jsoverson'\n\nanotherFunction();\n```\n\nCSS example\n\n```css\nbody {\n/* @if NODE_ENV=='development' */\n  background-color: red;\n/* @endif */\n\n}\n// @include util.css\n```\n\n(CSS preprocessing supports single line comment style directives)\n\n\n\n### Shell, PHP\n\n```bash\n#!/bin/bash\n\n# @include util.sh\n\n```\n\n## Configuration and Usage\n\nInstall via npm\n\n```bash\n$ npm install --save preprocess\n```\n\nUse the exposed `preprocess` method or the convenience file functions. The context, by default, is the\ncurrent ENV config the process (`process.env`)\n\n```js\n\nvar pp = require('preprocess');\n\nvar text = 'Hi, I am <!-- @echo USERNAME -->';\n\npp.preprocess(text);\n// -> Hi, I am jsoverson\n\npp.preprocess(text, {USERNAME : \"Bob\"});\n// -> Hi, I am Bob\n\n// specify the format to use for the directives as the third parameter\npp.preprocess(text, {USERNAME : \"Bob\"}, 'html');\n// -> Hi, I am Bob\n\n// Simple wrapper around fs.readFile and fs.writeFile\npp.preprocessFile(src, dest, context, callback);\n\n// Simple wrapper around fs.readFileSync and fs.writeFileSync\npp.preprocessFileSync(src, dest, context);\n\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using jshint\n\n## Release History\n - 2.1.0 Added automatic support for numerous formats, merged @exec, hidden by default html tags, added simple directives\n - 2.0.0 Added ability to echo strings, added conditional comments, removed lodash, merged 17, 13, 15, 16\n - 1.2.0 Added processing for hash-style comments (via @marsch). Added more file aliases.\n - 1.1.0 Added deep inclusion, fixed sequential ifs\n - 1.0.1 Fixed multiple inline echo statements\n - 1.0.0 Pulled from grunt-preprocess to stand alone\n\n## License\n\nCopyright Jarrod Overson\n\nWritten by Jarrod Overson\n\nLicensed under the Apache 2.0 license.\n",
  "readmeFilename": "README.md",
  "_id": "preprocess@2.1.1",
  "dist": {
    "shasum": "9985a1ce85823e9b4ab1d612494ff98c926dd8cb"
  },
  "_from": "preprocess@2.1.x",
  "_resolved": "https://registry.npmjs.org/preprocess/-/preprocess-2.1.1.tgz"
}
